# -*- coding: utf-8 -*-
"""Busca em Largura.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aaLvnCBamz6di7X1GzZF8-MIqTziIuX4
"""

# importa a estrutura de dados de fila no Python  
from queue import Queue

# instancia um grafo de maneira explícita
mapaRomania = {
    'Arad': ['Timisoara', 'Sibiu', 'Zerind'],
    'Zerind': ['Arad', 'Oradea'],
    'Oradea': ['Zerind', 'Sibiu'],
    'Sibiu': ['Arad', 'Oradea', 'Rimnicu', 'Fagaras'],
    'Timisoara': ['Lugoj', 'Arad'],
    'Lugoj': ['Timisoara', 'Mehadia'],
    'Mehadia': ['Lugoj', 'Drobeta'],
    'Drobeta': ['Mehadia', 'Craiova'],
    'Craiova': ['Drobeta', 'Rimnicu', 'Pitesti'],
    'Rimnicu': ['Sibiu', 'Pitesti', 'Craiova'],
    'Fagaras': ['Sibiu', 'Bucharest'],
    'Pitesti': ['Rimnicu', 'Craiova', 'Bucharest'],
    'Bucharest': ['Pitesti', 'Fagaras', 'Giurgiu', 'Urziceni'],
    'Giurgiu': ['Bucharest'],
    'Urziceni': ['Bucharest', 'Vaslui', 'Hirsova'],
    'Hirsova': ['Urziceni', 'Eforie'],
    'Eforie': ['Hirsova'],
    'Vaslui': ['Iasi', 'Urziceni'],
    'Iasi': ['Neamt', 'Vaslui'],
    'Neamt': ['Iasi']
}

# Função de Busca em Largura

def bfs(origem, destino):
    # Para manter o rastro de todos os nós já visitados
    visitado = {}
    # Para manter os custos de cada ação
    distancia = {}
    # Nós pais de um nó específico no grafo
    pai = {}

    bfs_visitados_output = []
    # A Busca em Largura é baseada na Estrutura de Fila para expandir os nós da fronteira de um dado nó. Cria uma Fila vazia
    queue = Queue()

    # For para mapear todos os nós não visitados no grafo
    for cidade in mapaRomania.keys():
        visitado[cidade] = False
        pai[cidade] = None
        distancia[cidade] = -1

    # Inicia a busca com o nó raiz passado como argumento na função
    inicio = origem
    visitado[inicio] = True
    distancia[inicio] = 0
    queue.put(inicio)

    # Aplica a Estratégia de Busca em Largura
    while not queue.empty():
        a = queue.get()     # Adiciona o no vigente à Fila
        bfs_visitados_output.append(a)

        # Explora os nós adjacentes ao nó vigente
        for b in mapaRomania[a]:
            if not visitado[b]:
                visitado[b] = True
                pai[b] = a
                distancia[b] = distancia[a] + 1
                queue.put(b)
            
        # Mapeia o caminho até o nó destino
        d = destino
        solucao = []
        while d is not None:
          solucao.append(d)
          d = pai[d]

    solucao.reverse()
    # Imprime a lista com o caminho da solução e a lista com todos os nós visitados
    print(solucao)
    print(bfs_visitados_output)

# Chama o algoritmo de Busca em Largura passando o nó raiz e o destino como parâmetros
bfs('Arad', 'Bucharest')